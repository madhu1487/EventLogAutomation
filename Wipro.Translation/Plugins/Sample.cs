using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

// <copyright file="Sample.cs" company="HP">
// Copyright Wipro (c) 2016 All Rights Reserved
// </copyright>
// <author><Author Name></author>
// <date><Date/Time Created></date>
// <summary>Implements the Sample Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

namespace Wipro.Translation.Plugins
{
    /// This plugin is a sample plugin and should not be used to perform any buisness function
    public abstract class Sample : Plugin
    {
        #region Constructors

        /// <summary>
        /// Initializes a new instance of the <see cref="Sample"/> class.
        /// </summary>
        public Sample() : base(typeof(Sample))
        {
            base.RegisteredEvents.Add(new Tuple<SdkMessageProcessingStepStage, string, string, Action<LocalPluginContext>>(SdkMessageProcessingStepStage.Postoperation, "<Plugin Message Name>", "<Entity Logical Name>", new Action<LocalPluginContext>(ExecuteSample)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        #endregion

        #region Protected Subs / Functions

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localPluginContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecuteSample(LocalPluginContext localPluginContext)
        {
            Exception exception = null;

            if (localPluginContext == null) exception = new ArgumentNullException("localPluginContext");

            // TODO: Implement your custom Plug-in business logic.
            IPluginExecutionContext context = localPluginContext.PluginExecutionContext;
            IOrganizationService service = localPluginContext.OrganizationService;

            //exit if the depth exceeds 2...otherwise infinite loop...and subsequent error.
            if (context.Depth > 2) return;

            try
            {
                Entity entity = null;
                EntityReference entityReference = null;

                if (context.InputParameters.Contains("EntityMoniker")) entityReference = (EntityReference)context.InputParameters["EntityMoniker"];
                if (context.InputParameters.Contains("Target"))
                {
                    entity = context.InputParameters["Target"] as Microsoft.Xrm.Sdk.Entity;
                    if (entity == null) entityReference = (EntityReference)context.InputParameters["Target"];
                }
                if (entity != null && entityReference == null) entityReference = entity.ToEntityReference();

                //Null validation
                if (entityReference != null)
                {
                    //TODO: Add plugin business logic here
                }
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                localPluginContext.ThrowException("Fault Exception Occured", ex);
            }
            catch (Exception ex)
            {
                exception = ex;
            }
            finally
            {
                //Throw exception
                if (exception != null) throw new InvalidPluginExecutionException(exception.Message);
            }
        }

        #endregion
    }
}
